name: Pandoc Specification Builder
description: Sets up Pandoc and runs either a pre-defined pandoc-spec script in package.json or the pandoc-spec shell script.

inputs:
  include-repository:
    description: If true, includes node setup, repository checkout, and npm install. Default is false.
    required: false
  node-version:
    description: Version of node to be installed; ignored if include-repository is false. Default is environment-defined.
    required: false
  include-pages:
    description: If true, includes publication to GitHub Pages. Default is false.
    required: false
  pages-path:
    description: Path of the output directory containing the GitHub Pages content; ignored if include-pages is false. Default is "_site/".
    required: false
    # Default must match default for path in actions/upload-pages-artifact.
    default: "_site/"
  include-branches:
    description: If true, includes non-default branch publication to the "_branch/<branch_name>" path; ignored if include-pages is false.
    required: false
  default-branch:
    description: Default branch for include-branches to filter; ignored if include-branches is false. Default is "main".
    required: false
    default: "main"
  pages-archive:
    description: Pages archive name; ignored if include-branches is false. Default is "_pages". Temporary directory with this name will be created during build and ZIP file with this name will be published to the root.
    required: false
    default: "_pages"

runs:
  using: composite

  steps:
    - name: Setup node
      if: inputs.include-repository == 'true'
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        registry-url: https://registry.npmjs.org/

    - name: Checkout
      if: inputs.include-repository == 'true'
      uses: actions/checkout@v4

    - name: NPM install
      if: inputs.include-repository == 'true'
      shell: bash
      run: |
        npm install

    - name: Setup Pandoc
      uses: pandoc/actions/setup@v1

    - name: Build specification
      shell: bash
      run: |
        # Exit codes are handled by script.
        set +e
        
        if [[ -f package.json ]]
        then
          npm_scripts=$(npm run)
          
          if [[ $? -eq 0 ]]
          then
            if [[ "$npm_scripts" == "" ]]
            then
              echo "No scripts found."
              grep_result=1
            else
              # Check for package-defined build.
              echo "$npm_scripts" | grep -q "^  pandoc-spec-action$"
              grep_result=$?
            fi
          else
            # npm command failed.
            exit $?
          fi
        else
          # No package.json.
          grep_result=1
        fi
        
        if [[ -f $PWD/node_modules/.bin/pandoc-spec ]]
        then
          # Update path to include npm binary directory.
          PATH=$PATH:$PWD/node_modules/.bin
        else
          # Pandoc Specification Builder not installed in npm package; install globally.
          npm install @legreq/pandoc-spec --global
        fi
      
        if [[ $grep_result -eq 0 ]]
        then
          echo "Running pandoc-spec-action npm script"
          npm run pandoc-spec-action
        else
          echo "Running pandoc-spec shell script"
          pandoc-spec
        fi

    - name: Merge branches
      if: inputs.include-pages == 'true' && inputs.include-branches == 'true' && github.ref_type == 'branch'
      shell: bash
      run: |
        # Exit codes are handled by script.
        set +e
        
        host_name=$(echo "${{ github.event.repository.owner.name }}.github.io" | tr "[:upper:]" "[:lower:]")
        repository_name="${{ github.event.repository.name }}"
        lower_repository_name=$(echo "$repository_name" | tr "[:upper:]" "[:lower:]")
        
        if [[ "$lower_repository_name" == "host_name" ]]
        then
          pages_url="https://$host_name"
        else
          pages_url="https://$host_name/$repository_name"
        fi
        
        pages_archive=${{ inputs.pages-archive }}
        
        # Get and unzip GitHub Pages archive.
        curl -s $pages_url/"$pages_archive".zip -o "$pages_archive".zip
        if [[ $? -eq 0 ]]
        then
          unzip -qq "$pages_archive".zip -d "$pages_archive"
          rm "$pages_archive".zip
        else
          # First time including branches. Treat current content as default branch; will be fixed on next push to default branch. 
          cp -r "${{ inputs.pages-path }}" "$pages_archive"/
        fi

        cd "$pages_archive"
        
        if [[ -d _branch ]]
        then
          cd _branch
      
          branches=$(git ls-remote --branches | grep -oE "[^/]+$")
        
          ls | while read -r branch
          do
            # Check that branch still exists.
            echo "$branches" | grep -q "^$branch$"
      
            if [[ $? -ne 0 ]]
            then
              echo "Deleting stale branch $branch"
        
              # Branch no longer exists; delete from GitHub Pages.
              rm -rf "$branch"
            fi
          done
      
          cd ..
        else
          mkdir _branch
        fi
        
        branch=${{ github.ref_name }}
        
        if [[ "$branch" == "${{ inputs.default-branch }}" ]]
        then
          # Move entire _branch directory.
          mv _branch "../${{ inputs.pages-path }}"
        else
          # Remove previous branch content if it exists and replace it with newly generated content.
          rm -rf "_branch/$branch"
          mkdir "_branch/$branch"
          mv "../${{ inputs.pages-path }}"/* "_branch/$branch"
      
          # Move consolidated directory into place.
          mv * "../${{ inputs.pages-path }}"
        fi
      
        cd "../${{ inputs.pages-path }}"
      
        zip -q -r ../"$pages_archive" .
        mv ../"$pages_archive".zip .
      
        cd ..

    - name: Configure GitHub Pages
      if: inputs.include-pages == 'true'
      uses: actions/configure-pages@v5

    - name: Upload pages directory
      if: inputs.include-pages == 'true'
      uses: actions/upload-pages-artifact@v3
      with:
        path: ${{ inputs.pages-path }}

    - name: Deploy to GitHub Pages
      if: inputs.include-pages == 'true'
      uses: actions/deploy-pages@v4
