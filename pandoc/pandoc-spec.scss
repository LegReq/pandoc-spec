@use "sass:map";

@use "bootstrap/scss/bootstrap";

// Breakpoint name at which table of contents appears beside the document.
$toc-breakpoint-size: sm !default;

// Breakpoint at which table of contents appears beside the document.
$toc-breakpoint: map.get(bootstrap.$grid-breakpoints, $toc-breakpoint-size) !default;

// Container is a column with multiple rows.
.container {
  @extend .col;
  @extend .d-flex;
  @extend .flex-column;
  @extend .overflow-hidden;

  // max-width is set within Bootstrap; unset it.
  max-width: unset;
}

// Header, body, and footer are rows within container.
.header, .body, .footer {
  @extend .row;
}

// Body takes up entire container less space for header and footer.
.body {
  @extend .flex-fill;
}

// Table of contents takes 25% of the space above the breakpoint and is not printable.
.toc {
  @extend .col-#{$toc-breakpoint-size}-3;
  @extend .d-print-none;
}

// Content takes up remainder of the space.
.content {
  @extend .col;
}

@media screen {
  // Container is limited to viewport width and height.
  .container {
    width: 100vw;
    height: 100vh;
  }
}

// Up to breakpoint.
@media screen and (max-width: calc($toc-breakpoint - 1px)) {
  // Enable overflow on body.
  .body {
    overflow: auto !important;
  }
}

// Above breakpoint.
@media screen and (min-width: $toc-breakpoint) {
  // Disable overflow on body.
  .body {
    overflow: hidden !important;
  }

  // Limit height and enable overflow on table of contents and content.
  .toc, .content {
    max-height: 100% !important;
    overflow: auto !important;
  }
}

// Reset example counter.
.example-counter-reset {
  counter-reset: example-counter;
}

// Reset figure counter.
.figure-counter-reset {
  counter-reset: figure-counter;
}

// Counters are reset when content is generated.
.content {
  @extend .example-counter-reset;
  @extend .figure-counter-reset;
}

// Increment example counter.
.example-number {
  counter-increment: example-counter 1;
  font-weight: bold;
}

// Example number after.
.example-number-after {
  @extend .example-number;
}

// Apply example number after.
.example-number-after::after {
  content: " " counter(example-counter);
}

// Example number before.
.example-number-before {
  @extend .example-number;
}

// Apply example number before.
.example-number-before::before {
  content: counter(example-counter) ". ";
}

// Example caption.
.example-caption {
  font-style: italic;
}

// Increment figure counter.
.figure-number {
  counter-increment: figure-counter 1;
  font-weight: bold;
}

// Example number after.
.figure-number-after {
  @extend .figure-number;
}

// Apply figure number after.
.figure-number-after::after {
  content: " " counter(figure-counter);
}

// Example number before.
.figure-number-before {
  @extend .figure-number;
}

// Apply figure number before.
.figure-number-before::before {
  content: counter(figure-counter) ". ";
}

// Example caption.
.figure-caption {
  font-style: italic;
}
